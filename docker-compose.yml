# services:
#   mongodb-primary:
#     image: bitnami/mongodb:${MONGODB_VERSION}
#     container_name: mongodb-primary
#     ports:
#       - 27017:27017
#     environment:
#       - MONGODB_ADVERTISED_HOSTNAME=${MONGODB_DEFAULT_HOSTS:-}
#       - MONGODB_REPLICA_SET_MODE=primary
#       - MONGODB_ROOT_PASSWORD=${MONGODB_DEFAULT_PASSWORDS:-}
#       - MONGODB_REPLICA_SET_KEY=${MONGODB_DEFAULT_KEYS:-}
#       - MONGODB_ENABLE_JOURNAL=true
#       - MONGODB_ENABLE_IPV6=yes
#     volumes:
#       - "./data:/bitnami"
#     networks:
#       - yan
#     restart: unless-stopped

#   mongodb-secondary:
#     image: bitnami/mongodb:${MONGODB_VERSION}
#     container_name: mongodb-secondary
#     ports:
#       - 27018:27017
#     environment:
#       - MONGODB_ADVERTISED_HOSTNAME=${MONGODB_DEFAULT_HOSTS:-}
#       - MONGODB_REPLICA_SET_MODE=secondary
#       - MONGODB_INITIAL_PRIMARY_HOST=mongodb-primary
#       - MONGODB_INITIAL_PRIMARY_PORT_NUMBER=27017
#       - MONGODB_INITIAL_PRIMARY_ROOT_PASSWORD=${MONGODB_DEFAULT_PASSWORDS:-}
#       - MONGODB_REPLICA_SET_KEY=${MONGODB_DEFAULT_KEYS:-}
#       - MONGODB_ENABLE_JOURNAL=true
#       - MONGODB_ENABLE_IPV6=yes
#     networks:
#       - yan
#     depends_on:
#       - mongodb-primary
#     restart: unless-stopped

#   mongodb-arbiter:
#     image: bitnami/mongodb:${MONGODB_VERSION}
#     container_name: mongodb-arbiter
#     ports:
#       - 27019:27017
#     environment:
#       - MONGODB_ADVERTISED_HOSTNAME=${MONGODB_DEFAULT_HOSTS:-}
#       - MONGODB_REPLICA_SET_MODE=arbiter
#       - MONGODB_INITIAL_PRIMARY_HOST=mongodb-primary
#       - MONGODB_INITIAL_PRIMARY_PORT_NUMBER=27017
#       - MONGODB_INITIAL_PRIMARY_ROOT_PASSWORD=${MONGODB_DEFAULT_PASSWORDS:-}
#       - MONGODB_REPLICA_SET_KEY=${MONGODB_DEFAULT_KEYS:-}
#       - MONGODB_ENABLE_JOURNAL=true
#       - MONGODB_ENABLE_IPV6=yes
#     networks:
#       - yan
#     depends_on:
#       - mongodb-primary
#     restart: unless-stopped

# networks:
#   yan:
#     driver: bridge
services:
  mongo1:
    image: mongo:7.0
    command: ["--replSet", "rs0", "--bind_ip_all", "--port", "27017"]
    ports:
      - 27017:27017
    extra_hosts:
      - "host.docker.internal:host-gateway"
    healthcheck:
      test: echo "try { rs.status() } catch (err) { rs.initiate({_id:'rs0',members:[{_id:0,host:'host.docker.internal:27017',priority:1},{_id:1,host:'host.docker.internal:27018',priority:0.5},{_id:2,host:'host.docker.internal:27019',priority:0.5}]}) }" | mongosh --port 27017 --quiet
      interval: 5s
      timeout: 30s
      start_period: 0s
      start_interval: 1s
      retries: 30
    volumes:
      - "mongo1_data:/data/db"
      - "mongo1_config:/data/configdb"

  mongo2:
    image: mongo:7.0
    command: ["--replSet", "rs0", "--bind_ip_all", "--port", "27018"]
    ports:
      - 27018:27018
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - "mongo2_data:/data/db"
      - "mongo2_config:/data/configdb"

  mongo3:
    image: mongo:7.0
    command: ["--replSet", "rs0", "--bind_ip_all", "--port", "27019"]
    ports:
      - 27019:27019
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - "mongo3_data:/data/db"
      - "mongo3_config:/data/configdb"

volumes:
  mongo1_data:
  mongo2_data:
  mongo3_data:
  mongo1_config:
  mongo2_config:
  mongo3_config: